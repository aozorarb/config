*ddc.txt*	Dark deno-powered completion framework for neovim/Vim8

Author: Shougo <Shougo.Matsu at gmail.com>
License: MIT license

CONTENTS						*ddc-contents*

Introduction		|ddc-introduction|
Install			|ddc-install|
Interface		|ddc-interface|
  Options		  |ddc-options|
  Functions		  |ddc-functions|
  Custom Functions	  |ddc-custom-functions|
  Key mappings		  |ddc-key-mappings|
Examples		|ddc-examples|
Sources			|ddc-sources|
  Source option	          |ddc-source-options|
  Source params	          |ddc-source-params|
Filters			|ddc-filters|
  Filter options	  |ddc-filter-options|
  Filter params		  |ddc-filter-params|
Create source		|ddc-create-source|
  Source attributes	  |ddc-source-attributes|
  Item attributes	  |ddc-item-attributes|
Create filter		|ddc-create-filter|
  filter attributes	  |ddc-filter-attributes|
FAQ			|ddc-faq|
Compatibility		|ddc-compatibility|


==============================================================================
INTRODUCTION						*ddc-introduction*

*ddc* is the abbreviation of "dark deno-powered completion".  It provides an
asynchronous keyword completion system in the current buffer.

If you don't want to configure plugins, you don't have to use the plugin.
It does not work with zero configuration.  You can use other plugins.


==============================================================================
INSTALL							*ddc-install*

Note: Ddc.vim requires Neovim (0.6.0+) or Vim8.2.0662+ (latest is
recommended).

Please install both Deno and "denops.vim".

https://deno.land/
https://github.com/vim-denops/denops.vim

Note: Ddc.vim does not include any sources and filters.
You must install them you want manually.
You can search ddc.vim plugins(sources and filters) from
https://github.com/topics/ddc-vim.


==============================================================================
INTERFACE						*ddc-interface*

------------------------------------------------------------------------------
OPTIONS	 						*ddc-options*

Options can be toggled through the use of |ddc#custom#patch_global()|.

For example:
>
    " Set a single option
    call ddc#custom#patch_global('completionMode', 'manual')

    " Pass a dictionary to set multiple options
    call ddc#custom#patch_global({
    \ 'keywordPattern': '[a-zA-Z_]\w*',
    \ 'smartCase': v:true,
    \ })

    call ddc#custom#patch_filetype(['c', 'cpp'], 'sources', ['around'])
<

The set of available options follows.

					*ddc-option-autoCompleteDelay*
autoCompleteDelay
		Delay the completion after input in milliseconds.

		Default: 0

					*ddc-option-autoCompleteEvents*
autoCompleteEvents
		The auto completion fired events.  It must be list of
		|autocmd-events| string.

		Default: [
			"InsertEnter", "TextChangedI", "TextChangedP",
		]

				*ddc-option-backspaceCompletion*
backspaceCompletion
		If it is enabled, ddc.vim will complete even when backspace is
		typed.
		Note: It is disabled by default since backspace completion
		will cause completion flicker.
		Note: The flicker can reduce by |ddc-option-completionMenu|.

		Default: v:false

						*ddc-option-cmdlineSources*
cmdlineSources
		It is a list of registered source names for |command-line-mode|.
		Please see |ddc-option-sources|.

		Note: If you set it, |input()| auto completion is enabled.

		Note: "pum.vim" is needed for the feature.
		https://github.com/Shougo/pum.vim

		Default: []

						*ddc-option-completionMenu*
completionMenu
		The completion popup menu type. It must be following string.

		"native": Use |ins-completion-menu|.
		"pum.vim": Use "pum.vim" popup menu instead.
			https://github.com/Shougo/pum.vim
			It use floating windows for neovim or popup for Vim8
			feature.
			It can reduce completion flicker.
		"none": Disable popup menu.

		Default: "native"

						*ddc-option-completionMode*
completionMode
		The completion mode. It must be following string.

		"popupmenu": Use popup menu.
		"inline": Use virtual text by |nvim_buf_set_extmark()| in
			neovim or use |popup_create()| in Vim.
			Note: It does not work in command line mode.
		"manual": You can display popup menu manually by
			|ddc#map#complete()|.

		Default: "popupmenu"

						*ddc-option-filterOptions*
filterOptions
		It is a dictionary that maps filter names to its options.
		See also |ddc-filter-options|.

		Default: {}
>
		" e.g.
		call ddc#custom#patch_global('filterOptions', {
		    \ 'matcher_head': {},
		    \ })
<
						*ddc-option-filterParams*
filterParams
		It is a dictionary that maps filter names to its parameters.

		Default: {}
>
		" e.g.
		call ddc#custom#patch_global('filterParams', {
		    \ 'matcher_head': {},
		    \ })
<
						*ddc-option-inlineHighlight*
inlineHighlight
		The highlight of |ddc-option-completionMode|'s inline text.

		Default: "Comment"

					*ddc-option-keywordPattern*
keywordPattern
		It defines the keyword pattern for completion.
		Note: It is JavaScript regexp.
		Note: "\k" is converted to 'iskeyword' pattern.

		Default: '\k*'

					*ddc-option-overwriteCompleteopt*
overwriteCompleteopt
		If it is enabled, ddc.vim overwrites 'completeopt'
		automatically.
		Note: If you disable the feature, you need to change
		'completeopt' manually.

		Default: v:true

						*ddc-option-postFilters*
postFilters
		It is a list of registered filter names.  It is called after
		the items are filtered.
		It is useful if you want to sort items regardless source
		orders.

		Default: []

							*ddc-option-sources*
sources
		It is a list of registered source names.  You have to select
		one or more sources to use completion.
		Items from sources with smaller indexes will have smaller
		indexes.

		Default: []
>
		" e.g.
		call ddc#custom#patch_global('sources', ['around'])
<
						*ddc-option-sourceOptions*
sourceOptions
		It is a dictionary that maps source names to its options.  The
		options with the name "_" is used as the options for all
		sources.
		See also |ddc-source-options|.

		Default: {}
>
		" e.g.
		call ddc#custom#patch_global('sourceOptions', {
		    \ '_': {'matchers': ['matcher_head']},
		    \ 'around': {'mark': 'A'},
		    \ })
<
						*ddc-option-sourceParams*
sourceParams
		It is a dictionary that maps source names to its parameters.
		See also |ddc-source-params|.

		Default: {}
>
		" e.g.
		call ddc#custom#patch_global('sourceParams', {
		    \ 'around': {'max': 8},
		    \ })
<
				*ddc-option-specialBufferCompletion*
specialBufferCompletion
		If it is false and 'buftype' is not "", ddc auto completion is
		disabled automatically.

		Default: v:false

------------------------------------------------------------------------------
FUNCTIONS 						*ddc-functions*

							*ddc#callback()*
ddc#callback({id} [, {payload}])
		This is only for ddc plugin developers. It calls back to
		sources and filters that registered with this id.

		{id}: String to identify the receiver. All sources and filters
		  share the namespace, so please take care how naming.
		  `source/${this.name}` and `filter/${this.name}` are
		  recommended.
		{payload}: Arbitrary object passed as resolved. The default
		  value is |v:null|.

							*ddc#disable()*
ddc#disable()
		Disable ddc.vim all features permanently.
		It should be used when ddc.vim is broken.
		It should not be used for temporary plugin disable.
		Note: It changes the global state.

							*ddc#enable()*
ddc#enable()
		Enable ddc.vim features and you can use it.
		Note: It changes the global state.

					*ddc#enable_cmdline_completion()*
ddc#enable_cmdline_completion()
		Enable ddc.vim command line completion feature.
		Note: It must be called in command line mode.
		Note: "pum.vim" is needed for the feature.
		Note: It disables |command-line-window| feature.

							*ddc#register()*
ddc#register({dict})
		Register source or filter.
		The {dict} must have following keys.

		name: The filter name
		path: The filter path
		type: "source" or "filter"

						*ddc#syntax#get()*
ddc#syntax#get()
		Get current syntax groups.
		Note: "nvim-treesitter" is used if it is installed.

						*ddc#syntax#in()*
ddc#syntax#in({checks})
		Check {checks} groups in cursor.


CUSTOM FUNCTIONS 					*ddc-custom-functions*

							*ddc#custom#alias()*
ddc#custom#alias({type}, {alias-name}, {base-name})
		Define {alias-name} alias based on {base-name}.
		{type} must be "source" or "filter".
		Note: It must be called before sources/filters initialization.
>
		call ddc#custom#alias('source', 'foo', 'around')
		call ddc#custom#patch_global('sources', ['foo'])
		call ddc#custom#patch_global('sourceOptions', {
		      \ '_': {
		      \   'matchers': ['matcher_head'],
		      \   'sorters': ['sorter_rank'],
		      \   'converters': ['converter_remove_overlap'],
		      \ },
		      \ 'around': {'mark': 'A'},
		      \ 'foo': {'mark': 'foo'},
		      \ })
<
						*ddc#custom#get_buffer()*
ddc#custom#get_buffer()
		Get current buffer specific options.

						*ddc#custom#get_current()*
ddc#custom#get_current()
		Get current options.

						*ddc#custom#get_filetype()*
ddc#custom#get_filetype()
		Get filetype specific options.

						*ddc#custom#get_context()*
ddc#custom#get_context()
		Get context specific options.

						*ddc#custom#get_global()*
ddc#custom#get_global()
		Get global options.

						*ddc#custom#patch_buffer()*
ddc#custom#patch_buffer({option-name}, {value})
ddc#custom#patch_buffer({dict})
		Set local options on current buffer.  The arguments are the
		same as for |ddc#custom#patch_global()|.

						*ddc#custom#patch_filetype()*
ddc#custom#patch_filetype({filetype}, {option-name}, {value})
ddc#custom#patch_filetype({filetype}, {dict})
		Set options used for filetypes. {filetype} accepts a string or
		a list of strings. Options are {dict} or {'{option-name}':
		{value}}.

						*ddc#custom#patch_global()*
ddc#custom#patch_global({option-name}, {value})
ddc#custom#patch_global({dict})
		Set {option-name} option to {value}.
		If {dict} is available, the key is {option-name} and the value
		is {value}. See |ddc-options| for available {option-name}.

						*ddc#custom#set_buffer()*
ddc#custom#set_buffer({dict})
		Overwrites all local options on current buffer.
		The {dict} is the same as for |ddc#custom#set_global()|.

						*ddc#custom#set_filetype()*
ddc#custom#set_filetype({filetype}, {dict})
		Overwrites all options used for filetypes. {filetype} accepts
		a string or a list of strings.
		The {dict} is the same as for |ddc#custom#set_global()|.

						*ddc#custom#set_global()*
ddc#custom#set_global({dict})
		Overwrites all global options.
		The {dict} is the same as for |ddc#custom#set_global()|.

						*ddc#custom#set_context()*
ddc#custom#set_context({filetype}, {func})
		Overwrites all options used for context.
		{filetype} accepts a string or a list of strings.
		{func} is function.  {func} returns overwrites options
		dictionary.
		Note: It overwrites filetype specific options, but not buffer
		specific options.
		Note: {func} is evaluated after user input and it affects
		completion performance.
>
		call ddc#custom#set_context('go', { ->
		    \ ddc#syntax#in('TSComment') ? {
		    \   'sources': ['nextword', 'around'],
		    \ } : {} })
		call ddc#custom#set_context('c', { ->
		    \ ddc#syntax#in('Comment') ? {
		    \   'sources': ['nextword', 'around'],
		    \ } : {} })

------------------------------------------------------------------------------
KEY MAPPINGS 						*ddc-key-mappings*

						*ddc#map#can_complete()*
ddc#map#can_complete()
		Return |v:true| if current word completion is available.

							*ddc#map#complete()*
ddc#map#complete()
		Open current completion popup menu.
		Note: It must be in |:map-<expr>|.

					*ddc#map#complete_common_string()*
ddc#map#complete_common_string()
		Complete common string in items.
		This can be useful when items have a long common prefix.
		Note: It must be in |:map-<expr>|.

							*ddc#map#extend()*
ddc#map#extend()
		Confirm the items and extend current completion.
		Note: It must be in |:map-<expr>|.

					    	*ddc#map#inline_visible()*
ddc#map#inline_visible()
		Returns non-zero when the inline completion is visible, zero
		otherwise.

						*ddc#map#insert_item()*
ddc#map#insert_item({index})
		Insert the item at index {index}. Indices start at 0.
		Note: It must be in |:map-<expr>|.

					    	*ddc#map#manual_complete()*
ddc#map#manual_complete([{sources}])
		Manual trigger ddc completion.
		You can provide a list of {sources}: It can be the name of a
		source or a list of sources name.
		Note: Manual completion ignores
		|ddc-source-option-minAutoCompleteLength|.
		Note: It must be in |:map-<expr>|.

					    	*ddc#map#pum_visible()*
ddc#map#pum_visible()
		Returns non-zero when the popup menu is visible, zero
		otherwise.
		Note: It works for both |pum.vim| and native popup menu.

==============================================================================
EXAMPLES						*ddc-examples*
>
	" Customize global settings

	" Use around source.
	" https://github.com/Shougo/ddc-around
	call ddc#custom#patch_global('sources', ['around'])

	" Use matcher_head and sorter_rank.
	" https://github.com/Shougo/ddc-matcher_head
	" https://github.com/Shougo/ddc-sorter_rank
	call ddc#custom#patch_global('sourceOptions', {
	      \ '_': {
	      \   'matchers': ['matcher_head'],
	      \   'sorters': ['sorter_rank']},
	      \ })

	" Change source options
	call ddc#custom#patch_global('sourceOptions', {
	      \ 'around': {'mark': 'A'},
	      \ })
	call ddc#custom#patch_global('sourceParams', {
	      \ 'around': {'maxSize': 500},
	      \ })

	" Customize settings on a filetype
	call ddc#custom#patch_filetype(
	    \ ['c', 'cpp'], 'sources', ['around', 'clangd']
	    \ )
	call ddc#custom#patch_filetype(['c', 'cpp'], 'sourceOptions', {
	    \ 'clangd': {'mark': 'C'},
	    \ })
	call ddc#custom#patch_filetype('markdown', 'sourceParams', {
	    \ 'around': {'maxSize': 100},
	    \ })

	" Mappings

	" <TAB>: completion.
	" Note: It does not work for pum.vim
	"inoremap <silent><expr> <TAB>
	"\ ddc#map#pum_visible() ? '<C-n>' :
	"\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
	"\ '<TAB>' : ddc#map#manual_complete()

	" <S-TAB>: completion back.
	" Note: It does not work for pum.vim
	"inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'

	" Use ddc.
	call ddc#enable()
<

==============================================================================
SOURCES							*ddc-sources*

Note: The sources are not bundled in ddc.vim.  You need to install them
to use ddc.vim.  Please search them by https://github.com/topics/ddc-source

Note: The default sources are empty.  You need to
configure them to use ddc.

The sources must be registered by |ddc#register()| or put under
"denops/@ddc-sources/*.ts".

Note: The name is named by file name.

------------------------------------------------------------------------------
SOURCE OPTIONS						*ddc-source-options*

Note: The sources cannot set default options for source.  If the source need
to specify the recommended configuration, you should write it in the
documentation instead.

				    		*ddc-source-option-converters*
converters		(string[])
		It is a list of registered filter names to change items
		attributes.
		Items will be processed in the order you specify here.

		Default: []

					*ddc-source-option-dup*
dup			(boolean)			(Optional)
		The items will be added even when the same word is already
		present.

		Default: v:false

						*ddc-source-option-enabledIf*
enabledIf		(string)
		The text is evaluated to enable the source.
		If the result is |v:true| or the text is empty string, the
		source is enabled.

		Default: ''

				*ddc-source-option-forceCompletionPattern*
forceCompletionPattern	(string)
		If it matches the input, ddc ignores
		|ddc-source-option-minAutoCompleteLength|.
		Note: It is JavaScript regexp.

		Default: ''

				    	*ddc-source-option-ignoreCase*
ignoreCase		(boolean)
		If it is True, ddc ignores case.

		Default: v:false

				    	*ddc-source-option-isVolatile*
isVolatile		(boolean)
		If it is True, ddc refresh items always.

		Default: v:false

				    	    	*ddc-source-option-mark*
mark			(string)
		A text icon indicating the source displayed with the item.
		Note: If the source set item menu, the source must set it.  If
		the attribute is empty string, the item menu will be disabled.

		Default: ""

				    *ddc-source-option-maxAutoCompleteLength*
maxAutoCompleteLength	(number)
		Ignored length of keyword for auto completion.
		It is useful to edit BASE64 files.

		Default: 80

				    	*ddc-source-option-maxItems*
maxItems		(number)
		If there are more items than this value, ddc will ignore the
		filtering.

		Default: 500

						*ddc-source-option-matcherKey*
matcherKey		(string)
		Matcher compare key instead of "word".
		If it is empty string, the feature is disabled.

		Default: ""

				    		*ddc-source-option-matchers*
matchers		(string[])
		It is a list of registered filter names to filter items by
		user input.
		Items will be processed in the order you specify here.

		Default: []

				    *ddc-source-option-maxKeywordLength*
maxKeywordLength	(number)
		The maximum word of length for items.
		If it is 0, the feature is disabled.

		Default: 0

				    *ddc-source-option-minAutoCompleteLength*
minAutoCompleteLength	(number)
		Length of keyword required for auto completion.

		Default: 2

				    *ddc-source-option-minKeywordLength*
minKeywordLength	(number)
		The minimum word of length for items.
		If it is 0, the feature is disabled.

		Default: 0

				    		*ddc-source-option-sorters*
sorters			(string[])
		It is a list of registered filter names to sort items.
		Items will be processed in the order you specify here.

		Default: []

			    		    *ddc-source-option-timeout*
timeout			(number)
		The |ddc-source-attribute-gather| timeout for completion.

		Default: 2000

------------------------------------------------------------------------------
SOURCE PARAMS					*ddc-source-params*

These are the parameters that each source can have.  You can select the
behavior and tune the performance.

Please read the source documentation.


==============================================================================
FILTERS							*ddc-filters*

Once items have been supplied by one or more sources, they are passed through
the filters, which are matchers, converters or sorters. Sources can have
specific filters.

matchers: To filter items by user input
sorters: To sort items
converters: To change items attributes

Call order is matchers -> sorters -> converters

Note: The filters are not bundled in ddc.vim.  You need to install them
to use ddc.vim.  Please search them by https://github.com/topics/ddc-filter

Note: The default matchers/sorters/converters are empty.  You need to
configure them to use ddc.

The filters must be registered by |ddc#register()| or put under
"denops/@ddc-filters/*.ts".

Note: The name is named by file name.

------------------------------------------------------------------------------
FILTER OPTIONS						*ddc-filter-options*

Undefined now

------------------------------------------------------------------------------
FILTER PARAMS						*ddc-filter-params*

These are the parameters that each filter can have.  You can select the
behavior and tune the performance.

Please read the filter documentation.


==============================================================================
CREATE SOURCE						*ddc-create-source*

To create source, you should read other sources implementation.

The files must be registered by |ddc#register()|.
Source class must extend "BaseSource" class.

Note: The sources must be written in TypeScript language.

Note: If you call Vim functions, it is not asynchronous.

------------------------------------------------------------------------------
SOURCE ATTRIBUTES				*ddc-source-attributes*

						*ddc-source-attribute-events*
events			(string[])			(Optional)
		List of events for which |ddc-source-attribute-onEvent|
		should get called.

		Default: []

    					*ddc-source-attribute-isBytePos*
isBytePos		(boolean)			(Optional)
		If |ddc-source-attribute-getCompletePosition| returns byte
		position, it must be true.
		It is useful to use Vim script function.

		Default: false

						*ddc-source-attribute-gather*
gather			(function)			(Required)
		It is called to gather items.

	    			*ddc-source-attribute-gatherCandidates*
gatherCandidates	(function)
		Note: It is deprecated.  Please use
		|ddc-source-attribute-gather| instead.

	    			*ddc-source-attribute-getCompletePosition*
getCompletePosition	(function)			(Optional)
		It is called to get the position of the current completion.

		Default : |ddc-option-keywordPattern| is used.

					*ddc-source-attribute-onCompleteDone*
onCompleteDone		(function)			(Optional)
		Called after the completion.
		It is useful to substitute text after completion.
		Note: |ddc-item-attribute-user_data| must be "UserData" to use
		the feature.

						*ddc-source-attribute-onEvent*
onEvent			(function)			(Optional)
		Called for the autocommands.
		It is useful to make cache.

						*ddc-source-attribute-onInit*
onInit			(function)			(Optional)
		Called before call source functions.

						*ddc-source-attribute-params*
params			(function)			(Required)
		Called to get source params.

------------------------------------------------------------------------------
ITEM ATTRIBUTES					*ddc-item-attributes*

						*ddc-item-attribute-abbr*
abbr			(string)			(Optional)
		The abbreviation of a item. It is displayed in popup
		window.

						*ddc-item-attribute-dup*
dup			(boolean)			(Optional)
		If true, the item will be displayed in the popup menu when an
		item with the same word is already present.

						*ddc-item-attribute-info*
info			(string)			(Optional)
		The preview information of a item. If 'completeopt'
		contains "preview", it will be displayed in |preview-window|.

						*ddc-item-attribute-kind*
kind			(string)			(Optional)
		The kind of a item. It is displayed in popup window.

						*ddc-item-attribute-menu*
menu			(string)			(Optional)
		The menu information of a item. It is displayed in popup
		window.

						*ddc-item-attribute-user_data*
user_data		(UserData | string)	(Optional)
		The source specific data.

						*ddc-item-attribute-name*
word			(string)			(Required)
		The completion word of a item. It is used for matching
		inputs.


==============================================================================
CREATE FILTER						*ddc-create-filter*

To create filter, you should read other filters implementation.

The files must be registered by |ddc#register()|.
Filter class must extend "BaseFilter" class.

Note: The filters must be written in TypeScript language.

Note: If you call Vim functions, it is not asynchronous.

------------------------------------------------------------------------------
FILTER ATTRIBUTES				*ddc-filter-attributes*

						*ddc-filter-attribute-events*
events			(string[])			(Optional)
		List of events for which |ddc-filter-attribute-onEvent|
		should get called.

		Default: []

						*ddc-filter-attribute-filter*
filter			(function)			(Required)
		It is called to filter items.

						*ddc-filter-attribute-onEvent*
onEvent			(function)			(Optional)
		Called for the autocommands.
		It is useful to make cache.

						*ddc-filter-attribute-onInit*
onInit			(function)			(Optional)
		Called before call filter functions.

						*ddc-filter-attribute-params*
params			(function)			(Required)
		Called to get filter params.


==============================================================================
FREQUENTLY ASKED QUESTIONS (FAQ)			*ddc-faq*

Q: How to donate money to you?

A: I have started github sponsorship to spend more time for Vim/neovim
plugins.  You can donate money to help me!

   https://github.com/sponsors/Shougo


Q: Why does ddc.vim not include any sources/matchers/sorters/converters?

A: Because I cannot determine the best default
sources/matchers/sorters/converters.
Users use different environments/policy, etc...
So ddc.vim should not define the defaults.
You must define your defaults by configuration.
ddc.vim does not conflict with your defaults.


Q: Why do sources have no default options?

A: Because users can customize sources perfectly.  If a source has the
default, users have to check them.  It increases configuration cost.
The config should work as users config.


Q: I want to use inline suggestion like fish shell.

A: >
	inoremap <expr><C-t>       ddc#insert_item(0)
	call ddc#custom#patch_global('completionMode', 'inline')


Q: The Linked/chained completion exists like vim-mucomplete?

A: It is not implemented, but you can emulate the behavior by
   |ddc#map#manual_complete()| like this. >

	let g:chains = ['around', 'zsh', 'deoppet']
	function! MyChainCompletion() abort
	  let head = g:chains[0]
	  let g:chains = g:chains[1:] + [head]
	  return ddc#map#manual_complete([head])
	endfunction
	inoremap <silent><expr> <C-t>  MyChainCompletion()


Q: I want to silence the |ins-completion-menu| messages in the command line
such as "-- XXX completion (YYY)", "match 1 of 2", "The only match", "Pattern
not found", "Back at original", etc.

A: You can disable the messages through the 'shortmess' option. >

	set shortmess+=c


Q: I want to use the auto select feature.

A: You can use it by the 'completeopt' option. >

	set completeopt+=noinsert


Q: How do I select one of the responses from the pop up?

A: Please press <C-y> on the item.


Q: I want to close the preview window after completion is done.

A: >
	autocmd CompleteDone * silent! pclose!
<
Or
>
	autocmd InsertLeave * silent! pclose!
<
   Note: It conflicts with delimitMate.
   https://github.com/Shougo/deoplete.nvim/issues/234


Q: I want to disable the preview window feature.

A: >
	set completeopt-=preview


Q: I want to look selected function's arguments. But I don't like preview
window feature.

A: ddc.vim does not implement the feature.  ddc.vim provides auto completion
   feature only.  The extra tasks are out of the range.

   But you can do it by echodoc plugin.
   http://github.com/Shougo/echodoc.vim

   Or you can use lsp_signature.nvim plugin for nvim-lsp.
   https://github.com/ray-x/lsp_signature.nvim


Q: I want to use floating preview window feature.

A: ddc.vim does not implement the feature.  ddc.vim provides auto completion
   feature only.  The extra tasks are out of the range.

   You can do it by float-preview.nvim plugin.
   https://github.com/ncm2/float-preview.nvim

   Or you can use ddc-nvim-lsp-doc plugin for nvim-lsp.
   https://github.com/matsui54/ddc-nvim-lsp-doc


Q: Why don't create file/path source is for ddc.vim?

A: I know it is the important source.  But it is not easy to implement.
Please see below issues.

* Path separator "\" or "/" problem.  It should be converted to "/"?
* Start complete position problem
* The relative path is from buffer directory or current directory?
* When complete paths?
* Special characters should be escaped or not?
* Filename or path input may include spaces
* When trigger the source?
* Slash may be comment or URL or divide operator
* Hidden files
* Tilde/Environment variables substitution
* Link resolve

The file path source is the most buggy source in deoplete sources. So I don't
want to implement it anymore.

But other people has implemented it instead.

https://github.com/LumaKernel/ddc-file


Q: I want to enable "skkeleton" source when "skkeleton" is enabled only.

A: >
  autocmd User skkeleton-enable-pre call s:skkeleton_pre()
  function! s:skkeleton_pre() abort
    " Overwrite sources
    let s:prev_buffer_config = ddc#custom#get_buffer()
    call ddc#custom#patch_buffer('sources', ['skkeleton'])
  endfunction
  autocmd User skkeleton-disable-pre call s:skkeleton_post()
  function! s:skkeleton_post() abort
    " Restore sources
    call ddc#custom#set_buffer(s:prev_buffer_config)
  endfunction

Q: I want to enable command line completion by ddc.vim.

A: Note: pum.vim is needed.

https://github.com/Shougo/pum.vim
>
  call ddc#custom#patch_global('completionMenu', 'pum.vim')
  call ddc#custom#patch_global('autoCompleteEvents',
      \ ['InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineChanged'])
  nnoremap :       <Cmd>call CommandlinePre()<CR>:

  function! CommandlinePre() abort
    cnoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
    cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
    cnoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
    cnoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
    cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
    cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

    " Overwrite sources
    if !exists('b:prev_buffer_config')
      let b:prev_buffer_config = ddc#custom#get_buffer()
    endif
    call ddc#custom#patch_buffer('cmdlineSources', ['necovim', 'around'])

    autocmd User DDCCmdlineLeave ++once call CommandlinePost()
    autocmd InsertEnter <buffer> ++once call CommandlinePost()

    " Enable command line completion
    call ddc#enable_cmdline_completion()
  endfunction
  function! CommandlinePost() abort
    silent! cunmap <Tab>
    silent! cunmap <S-Tab>
    silent! cunmap <C-n>
    silent! cunmap <C-p>
    silent! cunmap <C-y>
    silent! cunmap <C-e>

    " Restore sources
    if exists('b:prev_buffer_config')
      call ddc#custom#set_buffer(b:prev_buffer_config)
      unlet b:prev_buffer_config
    else
      call ddc#custom#set_buffer({})
    endif
  endfunction

Q: Terminal title flickers when completion menu opens in neovim.

A: It is the problem of |nvim_win_set_option()|.  To avoid the problem, you
need to use the function.
https://github.com/hrsh7th/nvim-cmp/issues/309#issuecomment-940740456

Q: I want to enable auto completion in fine-cmdline.nvim
https://github.com/VonHeikemen/fine-cmdline.nvim

A: Note: Experimental >

  lua <<EOF
  require('fine-cmdline').setup({
    cmdline = {
      enable_keymaps = false
    },
    popup = {
      buf_options = {
        filetype = 'FineCmdlinePrompt'
      }
    },
   hooks = {
     set_keymaps = function(imap, feedkeys)
       imap('<Esc>', fn.close)
       imap('<C-c>', fn.close)

       imap('<Up>', fn.up_history)
       imap('<Down>', fn.down_history)
     end
   },
  })
  EOF

  call ddc#custom#patch_filetype(['FineCmdlinePrompt'], {
      \ 'keywordPattern': '[0-9a-zA-Z_:#]*',
      \ 'sources': ['cmdline', 'cmdline-history', 'around'],
      \ 'specialBufferCompletion': v:true,
      \ })

Q: The auto completion does not work if 'textwidth' is set.

A: If the input text is longer than 'textwidth', the completed text
will be the next line.  It breaks auto completion behavior.  So the auto
completion is disabled.

Q: I want to disable ddc auto completion.

A: >
    call ddc#custom#patch_global('completionMode', 'manual')

Q: ddc.vim starting is slow.

A: It may be slow in Windows environment.  You should use denops shared server
feature.

https://github.com/vim-denops/denops.vim#shared-server

Q: ddc.vim does not work in |command-line-window|.

A: ddc.vim does not work in |command-line-window| with "pum.vim".
Because |command-line-window| occurs "Not Allowed here" errors and it is hard
to fix in full asynchronous plugins.
I don't recommend for you to use |command-line-window|.
If you really want to need the completion, please enable
|ddc-option-specialBufferCompletion| without "pum.vim"

Q: "copilot.vim" does not work when ddc.vim popup is visible.

A: "copilot.vim" checks |pumvisible()|.  You should disable it. >

	let g:copilot_hide_during_completion = 0

Q: ddc.vim does not work when "dps-ghosttext.vim" is enabled.

A: "dps-ghosttext.vim" creates the special buffer which 'buftype' is "nofile".
You need to enable |ddc-option-specialBufferCompletion| for it.

==============================================================================
COMPATIBILITY						*ddc-compatibility*

2022.05.29
* Remove "[]" from mark.  User should add "[]" by user config instead.

2022.05.03
* input() auto completion is enabled when "cmdlineSources" is set.

2022.05.02
* Use "cmdlineSources" for command line mode.

2022.02.23
* Remove ddc#register_source() and ddc#register_filter().
* Change ddc#custom#set_context() behavior.

2022.02.22
* Rename maxCandidates to maxItems.
* Rename ddc#map#insert_candidate() to ddc#map#insert_item().
* Deprecate gatherCandidates attribute.

2022.02.04
* neovim 0.6 is required.

2021.12.10
* "denops/ddc-sources" and "denops/ddc-filters" files are not loaded.

2021.12.05
* Rename ddc#map#pumvisible() to ddc#map#pum_visible().
* The auto completion is disabled if current text is longer than 'textwidth'.

2021.11.16
* Remove ddc#refresh_candidates().

2021.09.22
* Remove old sources spec support

2021.09.20
* "denops/@ddc-sources/*.ts" or "denops/@ddc-filters/*.ts" files are
  autoloaded for denops compatibility.

2021.09.19
* "params" is required for both sources and filters.
* Allow string "user_data".
* ddc#custom#get_buffer() returns current buffer values.

2021.09.18
* "user_data" must be Record<string, JSONValue> type.

2021.09.17
* ddc#register_source() and ddc#register_filter() are deprecated

2021.09.16
* Remove old filters spec support

2021.09.14
* Check all denops API call

2021.09.13
* Change "specialBufferCompletionFiletypes" to "specialBufferCompletion"

2021.09.02
* Change onInit() timing.  It is called before sources/filters after
  initialized.
* Change onInit() arguments.
* Catch source/filters errors.

2021.08.28
* "denops/ddc-sources/*.ts" or "denops/ddc-filters/*.ts" files are autoloaded.

2021.08.27
* Remove deprecated prototypes

2021.08.20
* Sources and Filters functions arguments are changed

2021.08.15
* Use 'iskeyword' for |ddc-option-keywordPattern|.

2021.08.14
* Don't complete when backspace, because of completion flicker.

2021.08.13
* Disable special buffers completion except
  ddc-option-specialBufferCompletionFiletypes.

2021.08.09
* Rename ddc#auto_complete() to ddc#refresh_candidates()

2021.08.02
* Change gatherCandidates() arguments in sources
* Change filter() arguments in filters

2021.08.01
* Split "around" source
* Split "matcher_head" filter
* Split "sorter_rank" filter


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
